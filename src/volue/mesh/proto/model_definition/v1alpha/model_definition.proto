syntax = "proto3";

package volue.mesh.grpc.model_definition.v1alpha;

import "google/protobuf/field_mask.proto";

import "volue/mesh/proto/model_definition/v1alpha/resources.proto";
import "volue/mesh/proto/type/resources.proto";


// Mesh model definition service
// -------------------------------
// The Mesh model definition service is an API for managing Mesh model
// definition.
//
//
// Mesh model definition consists of:
// - Namespaces - used for grouping and filtering purposes in a model
//   definition. You can compare it to a C++ namespace. Namespace may
//   contain:
//   - object definitions
//   - attribute types
//   - other (nested) namespaces
//
// - Object definitions - consist of attribute definitions. You can
//   compare it to a C++ class. Objects in the model are instances of object
//   definitions. Object definitions can be owned by model definition
//   directly or a namespace.
//
// - Attribute types - used for creating *re-usable* attribute definitions.
//   Once defined could be used by different object definitions for creating
//   an attribute definition based on it.
//
//   Every `attribute definition` that is based on an attribute type will
//   inherit name, description and unit of measurement (if applicable) of
//   that attribute type.
//
//   Updates of all above mentioned properties (name, description and unit of
//   measurement) can be done on attribute definition level. In such case the
//   attribute type and attribute definition may have different property
//   values. However, there is a special way of handling changes to name and
//   measurement done on attribute type level. Updating an attribute type
//   name or unit of measurement will update also names and unit of
//   measurements in all attribute definitions that were created based on the
//   given attribute type. Other properties like description will change just
//   the property on the attribute type level.
//
// - Attribute definitions - based on attribute types. You can compare it to
//   a C++ class member. Attribute definition may be singular or an array of
//   one of the following types:
//   - String, boolean, int, double or UTC time. These are known as
//     _simple types_.
//   - XY set, rating curve or `time series attribute` (time series can be
//     a calculation or a reference to a `physical time series` or
//     `virtual time series` from resource). These are known as
//     _complex types_.
//   - Ownership or link relation to an object definition.
//
//   Additionally, depending on the attribute type, the attribute definitions
//   specify parameters like default value, accepted value ranges, etc.
//
//   Changing the name of an attribute definition will also change the names
//   of all already existing attributes in the model to the new value.
//
// Model definition itself is also a namespace. In all requests where
// a namespace is required, a model definition could be also provided.
//
service ModelDefinitionService {

  rpc SearchObjectDefinitions(SearchObjectDefinitionsRequest) returns (stream ObjectDefinition) {}

  rpc GetObjectDefinition(GetObjectDefinitionRequest) returns (ObjectDefinition) {}
  rpc CreateObjectDefinition(CreateObjectDefinitionRequest) returns (ObjectDefinition) {}
  rpc UpdateObjectDefinition(UpdateObjectDefinitionRequest) returns (UpdateObjectDefinitionResponse) {}

  // Delete existing object definition from the model definition.
  //
  // If the given object definition has instances (i.e.: objects in the model),
  // then the delete operation will not succeed.
  // In such cases the user should use `SearchObjectsByDefinition` RPC to get
  // list of all instances/`Object`s and delete them using `DeleteObject` RPC.
  rpc DeleteObjectDefinition(DeleteObjectDefinitionRequest) returns (DeleteObjectDefinitionResponse) {}

  rpc SearchAttributeTypes(SearchAttributeTypesRequest) returns (stream AttributeType) {}
  rpc GetAttributeType(GetAttributeTypeRequest) returns (AttributeType) {}

  rpc CreateLinkRelationAttributeType(CreateRelationAttributeTypeRequest) returns (AttributeType) {}
  rpc CreateOwnershipRelationAttributeType(CreateRelationAttributeTypeRequest) returns (AttributeType) {}
  rpc CreateRatingCurveAttributeType(CreateRatingCurveAttributeTypeRequest) returns (AttributeType) {}
  rpc CreateSimpleAttributeType(CreateSimpleAttributeTypeRequest) returns (AttributeType) {}
  rpc CreateTimeseriesAttributeType(CreateTimeseriesAttributeTypeRequest) returns (AttributeType) {}
  rpc CreateXySetAttributeType(CreateXySetAttributeTypeRequest) returns (AttributeType) {}

  rpc UpdateRatingCurveAttributeType(UpdateRatingCurveAttributeTypeRequest) returns (UpdateAttributeTypeResponse) {}
  // Update existing ownership or link relation attribute type.
  rpc UpdateRelationAttributeType(UpdateRelationAttributeTypeRequest) returns (UpdateAttributeTypeResponse) {}
  rpc UpdateSimpleAttributeType(UpdateSimpleAttributeTypeRequest) returns (UpdateAttributeTypeResponse) {}
  rpc UpdateTimeseriesAttributeType(UpdateTimeseriesAttributeTypeRequest) returns (UpdateAttributeTypeResponse) {}
  rpc UpdateXySetAttributeType(UpdateXySetAttributeTypeRequest) returns (UpdateAttributeTypeResponse) {}

  // Delete existing attribute type from the model definition.
  //
  // If the given attribute type is used, meaning there is an attribute
  // definition based on a given attribute type, then the delete operation will
  // not succeed.
  // In such cases the user should use `SearchAttributeDefinitions` RPC to get
  // list of all `AttributeDefinition`s that are based on a given attribute
  // type and then use `DeleteAttributeDefinition` RPC to delete them.
  rpc DeleteAttributeType(DeleteAttributeTypeRequest) returns (DeleteAttributeTypeResponse) {}

  // Return all instances of a given attribute type.
  rpc SearchAttributeDefinitions(SearchAttributeDefinitionsRequest) returns (stream AttributeDefinition) {}
  rpc GetAttributeDefinition(GetAttributeDefinitionRequest) returns (AttributeDefinition) {}

  // Attribute types created by `Create...AttributeType` RPCs can serve as
  // a base for attribute definitions that are added to object definition.
  // Object definitions are created by `CreateObjectDefinition` RPC.
  //
  // When an attribute definition is added to an object definition it
  // will be visible in all objects' in the model.

  rpc AddRatingCurveAttributeDefinition(AddRatingCurveAttributeDefinitionRequest) returns (AttributeDefinition) {}
  rpc AddLinkRelationAttributeDefinition(AddLinkRelationAttributeDefinitionRequest) returns (AttributeDefinition) {}
  rpc AddOwnershipRelationAttributeDefinition(AddOwnershipRelationAttributeDefinitionRequest) returns (AttributeDefinition) {}
  rpc AddSimpleAttributeDefinition(AddSimpleAttributeDefinitionRequest) returns (AttributeDefinition) {}
  rpc AddTimeseriesAttributeDefinition(AddTimeseriesAttributeDefinitionRequest) returns (AttributeDefinition) {}
  rpc AddXySetAttributeDefinition(AddXySetAttributeDefinitionRequest) returns (AttributeDefinition) {}

  rpc UpdateRatingCurveAttributeDefinition(UpdateRatingCurveAttributeDefinitionRequest) returns (UpdateAttributeDefinitionResponse) {}
  // Update existing ownership or link relation attribute type.
  rpc UpdateRelationAttributeDefinition(UpdateRelationAttributeDefinitionRequest) returns (UpdateAttributeDefinitionResponse) {}
  rpc UpdateSimpleAttributeDefinition(UpdateSimpleAttributeDefinitionRequest) returns (UpdateAttributeDefinitionResponse) {}
  rpc UpdateTimeseriesAttributeDefinition(UpdateTimeseriesAttributeDefinitionRequest) returns (UpdateAttributeDefinitionResponse) {}
  rpc UpdateXySetAttributeDefinition(UpdateXySetAttributeDefinitionRequest) returns (UpdateAttributeDefinitionResponse) {}

  rpc DeleteAttributeDefinition(DeleteAttributeDefinitionRequest) returns (DeleteAttributeDefinitionResponse) {}


  rpc ListModelDefinitions(ListModelDefinitionsRequest) returns (ListModelDefinitionsResponse) {}
  // Model definition is also a namespace.
  // Search for namespaces or model definitions.
  rpc SearchNamespaces(SearchNamespacesRequest) returns (stream Namespace) {}
  // Get namespace or model definition.
  rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {}
  // Create namespace or model definition.
  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace) {}
  // Update namespace or model definition.
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {}
  // Delete existing namespace or model definition.
  //
  // If the given namespace has children (i.e.: attribute definitions, object
  // definitions or namespaces), then the delete operation will not succeed.
  // In such cases the user should use `GetNamespace` RPC to get list of
  // children and delete them using appropriate `DeleteObjectDefinition`,
  // `DeleteAttributeDefinition` or `DeleteNamespace` RPCs.
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {}

  // Tags can be added to attribute types and object definitions for grouping
  // and filtering purposes.

  rpc CreateTag(CreateTagRequest) returns (Tag) {}
  // Search for `AttributeType`s or `ObjectDefinition`s that are using
  // specific tag.
  rpc SearchTagUsages(SearchTagUsagesRequest) returns (stream TagUsage) {}
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {}
  rpc GetTag(GetTagRequest) returns (Tag) {}
  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse) {}
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {}

  rpc ListUnitsOfMeasurement(ListUnitsOfMeasurementRequest) returns (ListUnitsOfMeasurementResponse) {}

  // Extended metadata is an additional, optional information that can be set on
  // attribute definitions, object definitions and namespaces.
  //
  // See `ExtendedMetadata` message for more information.
  rpc GetExtendedMetadata(GetExtendedMetadataRequest) returns (GetExtendedMetadataResponse) {}
  rpc SetExtendedMetadata(SetExtendedMetadataRequest) returns (SetExtendedMetadataResponse) {}
}


message SearchObjectDefinitionsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the object definitions to be searched for.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // If set to true then all child namespaces will be also included in the
  // search. Otherwise only object definitions that are direct children of the
  // given namespace will be returned in the response.
  bool recursive_search = 3;

  // Defines what object definition information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `ObjectDefinition` message field names to be
  // returned in the response.
  // For example to return only ID, name and attribute definitions:
  //   field_mask = ['id', 'name', 'attribute_definitions']
  google.protobuf.FieldMask field_mask = 4;
}

message GetObjectDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId object_definition_id = 2;

  // Defines what object definition information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `ObjectDefinition` message field names to be
  // returned in the response.
  // For example to return only ID, name and attribute definitions:
  //   field_mask = ['id', 'name', 'attribute_definitions']
  google.protobuf.FieldMask field_mask = 3;
}

message CreateObjectDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the object definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // Name of the new object definition.
  string name = 3;

  // Description of the new object definition.
  string description = 4;

  // List of tags that will be added to the object definition.
  repeated volue.mesh.grpc.type.Guid tag_ids = 5;
}

message UpdateObjectDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the object definition to be updated.
  volue.mesh.grpc.type.MeshId object_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update object's definition name:
  //   field_mask = ['new_name']
  //   new_name = 'new object def name'
  google.protobuf.FieldMask field_mask = 3;

  string new_name = 4;
  string new_description = 5;

  // List of tags that will be added to the object definition.
  // If set then all old tags will be replaced by the new tags.
  repeated volue.mesh.grpc.type.Guid new_tag_ids = 6;
}

message UpdateObjectDefinitionResponse {}

message DeleteObjectDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the object definition to be deleted.
  volue.mesh.grpc.type.MeshId object_definition_id = 2;
}

message DeleteObjectDefinitionResponse {}

message SearchAttributeDefinitionsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Defines what attribute definition information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `AttributeDefinition` message field names to be
  // returned in the response.
  // For example to return only ID, name and specific attribute definition type
  // (e.g.: `Int64AttributeDefinition`):
  //   field_mask = ['id', 'name', 'definition']
  google.protobuf.FieldMask field_mask = 3;
}

message GetAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Defines what attribute definition information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `AttributeDefinition` message field names to be
  // returned in the response.
  // For example to return only ID, name and specific attribute type definition
  // (e.g.: `Int64AttributeDefinition`):
  //   field_mask = ['id', 'name', 'definition']
  google.protobuf.FieldMask field_mask = 3;
}

message SearchAttributeTypesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the attribute type to be searched for.
  // Namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // If set to true then all child namespaces will be also included in the
  // search. Otherwise only attribute types that are direct children of the
  // given namespace will be returned in the response.
  bool recursive_search = 3;

  // If not set then all attribute types will be returned.
  optional AttributeValueType value_type = 4;

  // Defines what attribute type information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `AttributeType` message field names to be
  // returned in the response.
  // For example to return only ID and name:
  //   field_mask = ['id', 'name']
  google.protobuf.FieldMask field_mask = 5;
}

message GetAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Defines what attribute type information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `AttributeType` message field names to be
  // returned in the response.
  // For example to return only ID and name:
  //   field_mask = ['id', 'name']
  google.protobuf.FieldMask field_mask = 3;
}

message CreateRelationAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the relation attribute definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  string name = 3;
  string description = 4;

  // ID of the object definition the relation attribute will own or link to.
  volue.mesh.grpc.type.MeshId target_object_definition_id = 5;

  repeated volue.mesh.grpc.type.Guid tag_ids = 6;
}

message CreateRatingCurveAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the simple attribute definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  string name = 3;
  string description = 4;
  repeated volue.mesh.grpc.type.Guid tag_ids = 5;
}

message CreateSimpleAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the simple attribute definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  string name = 3;
  string description = 4;
  string expression = 5;

  // Valid only for integer and double attributes.
  volue.mesh.grpc.type.Guid unit_of_measurement_id = 6;

  // Must be set to simple attribute definition value.
  // Simple attribute definitions which are:
  // - double
  // - integer
  // - boolean
  // - string
  // - UTC time
  //
  // `AttributeValueType` enum values in range 1-5.
  AttributeValueType value_type = 7;

  repeated volue.mesh.grpc.type.Guid tag_ids = 8;
}

message CreateTimeseriesAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the time series attribute definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  string name = 3;
  string description = 4;
  volue.mesh.grpc.type.Guid unit_of_measurement_id = 5;
  repeated volue.mesh.grpc.type.Guid tag_ids = 6;
}

message CreateXySetAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the simple attribute definition to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  string name = 3;
  string description = 4;
  string expression = 5;
  repeated volue.mesh.grpc.type.Guid tag_ids = 6;
}

message UpdateRatingCurveAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type to be updated.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type name:
  //   field_mask = ['new_name']
  //   new_name = 'new name'
  google.protobuf.FieldMask field_mask = 3;

  // The new name will be set also for all existing attribute definitions and
  // attributes based on the given attribute type.
  string new_name = 4;
  string new_description = 5;

  repeated volue.mesh.grpc.type.Guid new_tag_ids = 6;
}

message UpdateRelationAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the ownership or link relation attribute type to be updated.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type name:
  //   field_mask = ['new_name']
  //   new_name = 'new name'
  google.protobuf.FieldMask field_mask = 3;

  // The new name will be set also for all existing attribute definitions and
  // attributes based on the given attribute type.
  string new_name = 4;
  string new_description = 5;

  repeated volue.mesh.grpc.type.Guid new_tag_ids = 6;
}

message UpdateSimpleAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type to be updated.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type name:
  //   field_mask = ['new_name']
  //   new_name = 'new name'
  google.protobuf.FieldMask field_mask = 3;

  // The new name will be set also for all existing attribute definitions and
  // attributes based on the given attribute type.
  string new_name = 4;
  string new_description = 5;
  string new_expression = 6;

  // All units of measurement can be listed using `ListUnitsOfMeasurement` RPC.
  //
  // To clear the unit of measurement leave the `new_unit_of_measurement_id`
  // field empty (not ID with only zeros), but provide `new_unit_of_measurement_id`
  // string in the field mask.
  //
  // The new unit of measurement will be set also for all existing attribute
  // definitions and attributes based on the given attribute type.
  // Valid only for integer and double attributes.
  volue.mesh.grpc.type.Guid new_unit_of_measurement_id = 7;

  repeated volue.mesh.grpc.type.Guid new_tag_ids = 8;
}

message UpdateTimeseriesAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type to be updated.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type name:
  //   field_mask = ['new_name']
  //   new_name = 'new name'
  google.protobuf.FieldMask field_mask = 3;

  // The new name will be set also for all existing attribute definitions and
  // attributes based on the given attribute type.
  string new_name = 4;
  string new_description = 5;

  // All units of measurement can be listed using `ListUnitsOfMeasurement` RPC.
  //
  // To clear the unit of measurement leave the `new_unit_of_measurement_id`
  // field empty (not ID with only zeros), but provide `new_unit_of_measurement_id`
  // string in the field mask.
  //
  // The new unit of measurement will be set also for all existing attribute
  // definitions and attributes based on the given attribute type.
  volue.mesh.grpc.type.Guid new_unit_of_measurement_id = 6;
  repeated volue.mesh.grpc.type.Guid new_tag_ids = 7;
}

message UpdateXySetAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type to be updated.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type name:
  //   field_mask = ['new_name']
  //   new_name = 'new name'
  google.protobuf.FieldMask field_mask = 3;

  // The new name will be set also for all existing attribute definitions and
  // attributes based on the given attribute type.
  string new_name = 4;
  string new_description = 5;
  string new_expression = 6;
  repeated volue.mesh.grpc.type.Guid new_tag_ids = 7;
}

message UpdateAttributeTypeResponse {}

message DeleteAttributeTypeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type to be deleted.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;
}

message DeleteAttributeTypeResponse {}

message ListModelDefinitionsRequest{
  volue.mesh.grpc.type.Guid session_id = 1;

  // Defines what model definition information should be included in the
  // response. If not set all information will be included.
  // Model definition is a namespace.
  //
  // An array containing `Namespace` message field names to be
  // returned in the response.
  // For example to return only ID, name and children:
  //   field_mask = ['id', 'name', 'children']
  google.protobuf.FieldMask field_mask = 2;
}

message ListModelDefinitionsResponse {
  // Model definition is a namespace.
  repeated Namespace model_definitions = 1;
}

message SearchNamespacesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the namespaces to be searched for.
  // It is either a namespace OR model definition (which is also a namespace).
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // If set to true then all child namespaces will be also included in the
  // search. Otherwise only namespaces that are direct children of the
  // given namespace will be returned in the response.
  bool recursive_search = 3;

  // Defines what namespace information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `Namespace` message field names to be
  // returned in the response.
  // For example to return only ID, name and children:
  //   field_mask = ['id', 'name', 'children']
  google.protobuf.FieldMask field_mask = 4;
}

message AddRatingCurveAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;
}

message AddLinkRelationAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;

  // For versioned link relation attribute definitions,
  // cardinality MUST BE set to 1.
  int32 cardinality = 5;
  bool versioned = 6;
}

message AddOwnershipRelationAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;
  int32 cardinality = 5;
}

message AddSimpleAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;
  int32 cardinality = 5;

  // Valid for double, integer, boolean, UTC time and string attribute values.
  optional AttributeDefinitionDefaultValue default_value = 6;

  // Valid for double, integer, UTC time attribute values.
  optional AttributeDefinitionThresholdValue upper_threshold = 7;

  // Valid for double, integer, UTC time attribute values.
  optional AttributeDefinitionThresholdValue lower_threshold = 8;
}

message AddTimeseriesAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;
  int32 cardinality = 5;
}

message AddXySetAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute type serving as a base for the attribute definition to be added.
  volue.mesh.grpc.type.MeshId attribute_type_id = 2;

  // ID of the object definition to connect to.
  volue.mesh.grpc.type.MeshId object_definition_id = 3;

  string description = 4;

  XySetAxis x_axis = 5;
  XySetAxis y_axis = 6;
  optional XySetAxis z_axis = 7;

  bool versioned = 8;
}

message UpdateRatingCurveAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be updated.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type description:
  //   field_mask = ['new_description']
  //   new_description = 'new description'
  google.protobuf.FieldMask field_mask = 3;

  string new_description = 4;
}

message UpdateRelationAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be updated.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type description:
  //   field_mask = ['new_description']
  //   new_description = 'new description'
  google.protobuf.FieldMask field_mask = 3;

  string new_description = 4;
}

message UpdateSimpleAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be updated.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type description:
  //   field_mask = ['new_description']
  //   new_description = 'new description'
  google.protobuf.FieldMask field_mask = 3;

  string new_description = 4;

  // Valid for double, integer, boolean, UTC time and string attribute values.
  optional AttributeDefinitionDefaultValue new_default_value = 5;

  // Valid for double, integer, UTC time attribute values.
  optional AttributeDefinitionThresholdValue new_upper_threshold = 6;

  // Valid for double, integer, UTC time attribute values.
  optional AttributeDefinitionThresholdValue new_lower_threshold = 7;
}

message UpdateTimeseriesAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be updated.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type description:
  //   field_mask = ['new_description']
  //   new_description = 'new description'
  google.protobuf.FieldMask field_mask = 3;

  string new_description = 4;
  string new_template_expression = 5;
}

message UpdateXySetAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be updated.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update attributes's type description:
  //   field_mask = ['new_description']
  //   new_description = 'new description'
  google.protobuf.FieldMask field_mask = 3;

  string new_description = 4;
  XySetAxis new_x_axis = 5;
  XySetAxis new_y_axis = 6;
}

message UpdateAttributeDefinitionResponse {}

message DeleteAttributeDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the attribute definition to be deleted.
  volue.mesh.grpc.type.MeshId attribute_definition_id = 2;
}

message DeleteAttributeDefinitionResponse {}

message GetNamespaceRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // Defines what namespace information should be included in the
  // response. If not set all information will be included.
  //
  // An array containing `Namespace` message field names to be
  // returned in the response.
  // For example to return only ID, name and children:
  //   field_mask = ['id', 'name', 'children']
  google.protobuf.FieldMask field_mask = 3;
}

message CreateNamespaceRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Owner ID of the namespace to be created.
  // It is either a namespace OR model definition (which is also a namespace).
  //
  // When creating new model definition this MUST NOT be set.
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // Name of the new namespace.
  string name = 3;

  // Description of the new namespace.
  string description = 4;
}

message UpdateNamespaceRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the namespace to be updated.
  volue.mesh.grpc.type.MeshId name_space_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update name of the namespace:
  //   field_mask = ['new_name']
  //   new_name = 'new_name'
  google.protobuf.FieldMask field_mask = 3;

  string new_name = 4;
  string new_description = 5;
}

message UpdateNamespaceResponse {}

message DeleteNamespaceRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the namespace to be deleted.
  volue.mesh.grpc.type.MeshId name_space_id = 2;
}

message DeleteNamespaceResponse {}

message ListTagsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId model_definition = 2;
}

message ListTagsResponse {
  repeated Tag tags = 1;
}

message GetTagRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.Guid tag_id = 2;
}

message SearchTagUsagesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.Guid tag_id = 2;

  // Defines what attribute type or object definition information should be
  // included in the response. If not set all information will be included.
  //
  // An array containing `AttributeType` and/or `ObjectDefinition`
  // message field names to be returned in the response.
  // For example to return only ID, name and specific attribute type
  // (e.g.: `Int64AttributeDefinition`):
  //   field_mask = ['id', 'name', 'definition']
  google.protobuf.FieldMask field_mask = 3;
}

message CreateTagRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId model_definition = 2;
  string name = 3;
  string description = 4;
}

message UpdateTagRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the tag to be updated.
  volue.mesh.grpc.type.Guid tag_id = 2;

  // Only paths set in the field mask are updated.
  // For example to update tag's name:
  //   field_mask = ['new_name']
  //   new_name = 'new tag name'
  google.protobuf.FieldMask field_mask = 3;

  string new_name = 4;
  string new_description = 5;
}

message UpdateTagResponse {}

message DeleteTagRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID of the tag to be deleted.
  volue.mesh.grpc.type.Guid tag_id = 2;

  // If set to true then all usages of the tag (connections to attribute
  // types or object definitions) will be deleted along with the tag
  // itself.
  // If a given tag is connected to any attribute types or object definitions
  // and delete_usages flag has not been set the request will fail.
  //
  // Default value is false (default value for bool in proto3 is false).
  bool delete_usages = 3;
}

message DeleteTagResponse {}

message ListUnitsOfMeasurementRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
}

message ListUnitsOfMeasurementResponse {
  repeated UnitOfMeasurement units_of_measurement = 1;
}

message GetExtendedMetadataRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Identifier of the attribute defintion, object definition or namespace to
  // get the extended metadata from.
  volue.mesh.grpc.type.MeshId id = 2;
}

message GetExtendedMetadataResponse {
  repeated ExtendedMetadata metadata = 1;
}

message SetExtendedMetadataRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Identifier of the attribute defintion, object definition or namespace
  // where the extended metadata should be set.
  volue.mesh.grpc.type.MeshId id = 2;

  // List of extended metadata that will be added to the given target.
  // If set then all old extended metadata will be replaced by the new ones.
  repeated ExtendedMetadata metadata = 3;
}

message SetExtendedMetadataResponse {}
