syntax = "proto3";

package volue.mesh.grpc.auth.v1alpha;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";


// Authentication service
// -------------------------------
//
// When Mesh is configured to require authentication an access token is
// necessary for most calls. You can acquire an access token through Kerberos
// authentication as described above the `AuthenticateKerberos` method. Access
// tokens are passed in the `Authorization` metadata field of each RPC with the
// format `Bearer <access token>`.
//
// Many gRPC libraries provide call credential types that correctly pass the
// access token to the server, for example `grpc::AccessTokenCredentials` in
// C++.  These mechanisms will generally take the bare access token (without
// `Bearer`), and create the `Bearer <access token>` string internally.
//
// Access tokens expire after an hour and should be refreshed before then.
// Getting a new token early, for example after half the expiration time, is
// recommended.
//
service AuthenticationService {

  // Authenticate using Kerberos
  // -------------------------------
  // Perform a potentially multi-leg Kerberos authentication where the client
  // and the server sends Kerberos tickets back and forth until a complete
  // security context is established or an error occurs.

  // On success the final response from the server will contain a bearer token
  // that should be used as a token in calls that require authorization, as
  // well as the expiration time for that token.
  rpc AuthenticateKerberos(stream google.protobuf.BytesValue) returns (stream AuthenticateKerberosResponse) {}

  rpc AuthenticateFake(AuthenticateFakeRequest) returns (AuthenticateFakeResponse) {}

  // Revoke an access token received from `AuthenticateKerberos`, causing
  // it to become immediately unusable. If the RPC returns without error
  // the operation succeeded *or* the token does not exist.
  rpc RevokeAccessToken(google.protobuf.StringValue) returns (RevokeAccessTokenResponse) {}

  // Returns the identity that was used to create the access token authorizing
  // this call.
  rpc GetUserIdentity(google.protobuf.Empty) returns (UserIdentity) {}
}

message AuthenticateKerberosResponse {
  // The Kerberos ticket returned by the server's AcceptSecurityContext call.
  bytes kerberos_token = 1;

  // A base64 encoded access token.
  string bearer_token = 2;

  // The access token will become invalid at this time.
  google.protobuf.Duration token_duration = 3;
}

message AuthenticateFakeRequest {
  string display_name = 1;
  google.protobuf.Duration token_duration = 2;
  string internal = 15;
}

message AuthenticateFakeResponse {
  string bearer_token = 1;
  google.protobuf.Duration token_duration = 2;
}

message RevokeAccessTokenResponse {
}

message UserIdentity {
  // A human readable name identifying this user. This name should not be
  // used as an unique identifier for the user as it may be identical
  // between users and change over time.
  string display_name = 1;

  // Security package name where the user identity came from.
  // It is not an unique identifier of the security package instance.
  string source = 2;

  // An identifier that uniquely identifies the user within given `source`
  // instance, but not necessarily globally. Combining `source` and
  // `identifier` does not guarantee to get globally unique identifier for the
  // user as there may be different Active Directories using the same security
  // packages (`source`) with  duplicated user identifiers. However such
  // situation is rather unlikely.
  string identifier = 3;
}
