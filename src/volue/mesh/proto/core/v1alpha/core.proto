syntax = "proto3";

package volue.mesh.grpc.core.v1alpha;

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

import "volue/mesh/proto/core/v1alpha/resources.proto";
import "volue/mesh/proto/type/resources.proto";


// Mesh server service
// -------------------------------
// The Mesh service is an API for interacting with a running Mesh server, also called just Mesh.
//
//
// Authentication
//
// When Mesh is configured to require authentication an access token is
// necessary for most calls. You can acquire an access token through Kerberos
// authentication as described above the `AuthenticateKerberos` method. Access
// tokens are passed in the `Authorization` metadata field of each RPC with the
// format `Bearer <access token>`.
//
// Many gRPC libraries provide call credential types that correctly pass the
// access token to the server, for example `grpc::AccessTokenCredentials` in C++.
// These mechanisms will generally take the bare access token (without `Bearer`),
// and create the `Bearer <access token>` string internally.
//
// Access tokens expire after an hour and should be refreshed before then.
// Getting a new token early, for example after half the expiration time, is
// recommended.
//
service MeshService {

  // Authenticate using Kerberos
  // -------------------------------
  // Perform a potentially multi-leg Kerberos authentication where the client
  // and the server sends Kerberos tickets back and forth until a complete
  // security context is established or an error occurs.

  // On success the final response from the server will contain a bearer token
  // that should be used as a token in calls that require authorization, as
  // well as the expiration time for that token.
  rpc AuthenticateKerberos(stream google.protobuf.BytesValue) returns (stream AuthenticateKerberosResponse) {}

  rpc AuthenticateFake(AuthenticateFakeRequest) returns (AuthenticateFakeResponse) {}

  // Revoke an access token received from `AuthenticateKerberos`, causing
  // it to become immediately unusable. If the RPC returns without error
  // the operation succeeded *or* the token does not exist.
  rpc RevokeAccessToken(google.protobuf.StringValue) returns (RevokeAccessTokenResponse) {}

  // Returns the identity that was used to create the access token authorizing
  // this call.
  rpc GetUserIdentity(google.protobuf.Empty) returns (UserIdentity) {}

  // Sessions
  // -------------------------------
  // To work with data inside a Mesh server you need to create a workspace which
  // is called a session. Here you can have changes and calculations pending which
  // won't be visible to other users of the Mesh server until you commit them.
  //

  // Start a Mesh session on the server, return the id of the session.
  rpc StartSession(google.protobuf.Empty) returns (volue.mesh.grpc.type.Guid) {}

  // Close a session on the Mesh server.
  rpc EndSession(volue.mesh.grpc.type.Guid) returns (EndSessionResponse) {}

  // Commit changes in a server session to permanent storage.
  rpc Commit(volue.mesh.grpc.type.Guid) returns (CommitResponse) {}

  // Rollback changes that are in the server's session but not in the database yet.
  rpc Rollback(volue.mesh.grpc.type.Guid) returns (RollbackResponse) {}

  rpc ExtendSession(volue.mesh.grpc.type.Guid) returns (ExtendSessionResponse) {}

  // Timeseries
  // -------------------------------
  // In its simplest form a timeseries is just a table of timestamps, flags and values.
  // Timeseries can be organized and generated in different ways.
  // Some timeseries are retrieved 'as is' from the database where they are stored, while others
  // are generated using calculations which can be based on an arbitrary set of data.
  // Timeseries can be organized in a structure which resembles catalogs and thus can have a
  // path associated with it. They can also potentially be linked to a node in a Mesh model and with
  // that get a path that represents the nodes position in the Mesh model. More metadata like unit
  // of measurement, curve type and so on can also be linked to the timeseries.

  // Get a series of timestamps, flags and values.
  rpc ReadTimeseries(ReadTimeseriesRequest) returns (ReadTimeseriesResponse) {}

  rpc ReadTimeseriesStream(ReadTimeseriesStreamRequest) returns (stream ReadTimeseriesResponse) {}

  // Write a series of timestamps, flags and values.
  rpc WriteTimeseries(WriteTimeseriesRequest) returns (WriteTimeseriesResponse) {}

  // Run ad-hoc calculation
  rpc RunCalculation(CalculationRequest) returns (CalculationResponse) {}

  // List all models.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}

  // Get specific object from the model.
  rpc GetObject(GetObjectRequest) returns (Object) {}

  // Search for objects from the model.
  // The search uses Mesh's query language, which is the same language that's
  // used in for example Nimbus.
  //
  // The result stream is not ordered in any particular way, and the caller
  // should not expect the ordering of search results to be stable.
  //
  // If the search doesn't find any results an empty stream and an OK status
  // is returned.
  rpc SearchObjects(SearchObjectsRequest) returns (stream Object) {}

  // Search for `Object`s, i.e.: instances of a given `ObjectDefinition`.
  rpc SearchObjectsByDefinition(SearchObjectsByDefinitionRequest) returns (stream Object) {}

  // Create new object in the model.
  // In the first step user sets owner and name of the new object.
  // In case of success, the create operation returns OK status and newly
  // created object with all of the attributes set to default values.
  // Then the user may update the attributes with proper update attributes
  // RPCs, e.g.: `UpdateSimpleAttribute` or `UpdateTimeseriesAttribute`.
  // Note: Returned object has all attributes (no mask applied) and
  // `AttributeView::BASIC`.
  rpc CreateObject(CreateObjectRequest) returns (Object) {}

  rpc CreateModel(CreateModelRequest) returns (Object) {}

  // Update existing object in the model.
  // User may rename an object or change its owner.
  // To update object's attributes use proper update attributes RPCs,
  // e.g.: `UpdateSimpleAttribute` or `UpdateTimeseriesAttribute`.
  rpc UpdateObject(UpdateObjectRequest) returns (UpdateObjectResponse) {}

  // Delete existing object from the model.
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {}

  // Get specific attribute from the model.
  rpc GetAttribute(GetAttributeRequest) returns (Attribute) {}

  // Search for attributes from the model.
  // The search uses Mesh's query language, which is the same language that's
  // used in for example Nimbus.
  //
  // The result stream is not ordered in any particular way, and the caller
  // should not expect the ordering of search results to be stable.
  //
  // If the search doesn't find any results an empty stream and an OK status
  // is returned.
  rpc SearchAttributes(SearchAttributesRequest) returns (stream Attribute) {}

  // Search for enumeration attributes, enumeration attribute definitions and
  // enumeration attriubte types that are using specific enumeration value.
  rpc SearchEnumerationValueUsages(SearchEnumerationValueUsagesRequest) returns (stream EnumerationValueUsage) {}

  // Update value(s) of existing simple attribute in the model.
  // Simple attribute is a singular type or collection of the following types:
  // - double
  // - integer
  // - boolean
  // - string
  // - UTC time
  rpc UpdateSimpleAttribute(UpdateSimpleAttributeRequest) returns (UpdateSimpleAttributeResponse) {}

  // Update existing time series attribute in the model.
  rpc UpdateTimeseriesAttribute(UpdateTimeseriesAttributeRequest) returns (UpdateTimeseriesAttributeResponse) {}

  // Update existing one-to-one or one-to-many link relation (non-versioned)
  // attributes in the model.
  rpc UpdateLinkRelationAttribute(UpdateLinkRelationAttributeRequest) returns (UpdateLinkRelationAttributeResponse) {}

  // Update existing versioned one-to-one link relation attribute in the model.
  rpc UpdateVersionedLinkRelationAttribute(UpdateVersionedLinkRelationAttributeRequest) returns (UpdateVersionedLinkRelationAttributeResponse) {}

  rpc UpdateEnumerationAttribute(UpdateEnumerationAttributeRequest) returns (UpdateEnumerationAttributeResponse) {}

  // Get time series resource.
  // A time series resource:
  // - can be either physical or virtual time series
  // - can be connected to time series attributes.
  // - is identified by time series key or path within Resource catalog
  //
  // Physical time series has data (timestamps, values and flags) and
  // metadata (e.g.: curve type, resolution, etc.).
  // Virtual time series has metadata but instead of timestamps, values and
  // flags it has defined an expression to calculate time series data
  // (similar to calculation time series) but is stored in the resources.
  rpc GetTimeseriesResource(GetTimeseriesResourceRequest) returns (TimeseriesResource) {}

  // Update existing time series resource.
  rpc UpdateTimeseriesResource(UpdateTimeseriesResourceRequest) returns (UpdateTimeseriesResourceResponse) {}

  // Get the Mesh server version information.
  rpc GetVersion(google.protobuf.Empty) returns (VersionInfo) {}

  // Get the Mesh server health information.
  // This function is not stable. Both signature and response content are subjects to change.
  rpc GetHealthStatus(google.protobuf.Empty) returns (google.protobuf.Struct) {}

  // Get the Mesh server configuration.
  // This function is not stable. Both signature and response content are subjects to change.
  rpc GetConfiguration(google.protobuf.Empty) returns (google.protobuf.Struct) {}

  // Get zero or more `XySet`s from an XY-set attribute (`XYSetAttribute`) or
  // a versioned XY-set attribute (`XYZSeriesAttribute`). See `GetXySetsRequest`
  // for more information.
  rpc GetXySets(GetXySetsRequest) returns (GetXySetsResponse) {}

  // Create, update, and/or delete `XySet`s in an XY-set attribute
  // (`XYZAttribute`) or a versioned XY-set attribute (`XYZSeriesAttribute`).
  // See `UpdateXySetsRequest` for more information.
  rpc UpdateXySets(UpdateXySetsRequest) returns (UpdateXySetsResponse) {}

  // Get rating curve version(s) from a rating curve attribute
  // (`RatingCurveAttribute`).
  // See `GetRatingCurveVersionsRequest` for more information.
  rpc GetRatingCurveVersions(GetRatingCurveVersionsRequest) returns (GetRatingCurveVersionsResponse) {}

  // Create, update, and/or delete rating curve versions in a rating curve
  // attribute (`RatingCurveAttribute`).
  // See `UpdateRatingCurveVersionsRequest` for more information.
  rpc UpdateRatingCurveVersions(UpdateRatingCurveVersionsRequest) returns (UpdateRatingCurveVersionsResponse) {}

  // Get the currently set log level threshold
  rpc GetLogLevel(google.protobuf.Empty) returns (GetLogLevelResponse) {}

  // Change the log level threshold.
  rpc UpdateLogLevel(UpdateLogLevelRequest) returns (UpdateLogLevelResponse) {}

  // Copy time series from one part of Mesh model to another part of the model.
  // This method copies time series values from a set of time series (source) to another set of time series (target).
  // The input defines the root nodes of source hierarchy and target hierarchy.
  // In case these root nodes are different, the match between source series and target series is 
  // done by comparison of relative path to series attribute in source and target hierarchy.
  //
  // The function supports a mapping description that enables these operations:
  // - Copy to *another* attribute on the same object as the source series.
  // - Copy to *another* attribute on the matching object in the target hierarchy.
  // - Copy time series from a source hierarchy to a target identified by a general search/navigation spec on the mapping definition.
  //
  // In case mapping is enabled, the root nodes for source and target may be the same.
  rpc CopyTimeseriesBetweenObjects(CopyTimeseriesBetweenObjectsRequest) returns (CopyTimeseriesBetweenObjectsResponse) {}

  // Resources part of Mesh structure is not bound to a specific model definition or model.
  // It is organized by hierarchies of catalogs, like a file system. 
  // A catalog may contain different type of resource objects. The most common types are Timeseries, Binary files and Text files
  // This interface targets the Text files and provides functions to Read/Write/List text resources.

  rpc ListTextResources(ListTextResourcesRequest) returns (ListTextResourcesResponse) {}
  rpc GetTextResource(GetTextResourceRequest) returns (GetTextResourceResponse) {}
  rpc WriteTextResource(WriteTextResourceRequest) returns (WriteTextResourceResponse) {}
}

message AuthenticateKerberosResponse {
  // The Kerberos ticket returned by the server's AcceptSecurityContext call.
  bytes kerberos_token = 1;

  // A base64 encoded access token.
  string bearer_token = 2;

  // The access token will become invalid at this time.
  google.protobuf.Duration token_duration = 3;
}

message AuthenticateFakeRequest {
  string display_name = 1;
  google.protobuf.Duration token_duration = 2;
  string internal = 15;
}

message AuthenticateFakeResponse {
  string bearer_token = 1;
  google.protobuf.Duration token_duration = 2;
}

message RevokeAccessTokenResponse {}

message UserIdentity {
  // A human readable name identifying this user. This name should not be
  // used as an unique identifier for the user as it may be identical
  // between users and change over time.
  string display_name = 1;

  // Security package name where the user identity came from.
  // It is not an unique identifier of the security package instance.
  string source = 2;

  // An identifier that uniquely identifies the user within given `source` instance, but
  // not necessarily globally. Combining `source` and `identifier` does not guarantee
  // to get globally unique identifier for the user as there may be different
  // Active Directories using the same security packages (`source`) with
  // duplicated user identifiers. However such situation is rather unlikely.
  string identifier = 3;
}

message EndSessionResponse {}

message ExtendSessionResponse {
    google.protobuf.Duration expires_in = 1;
}

message CommitResponse {}

message RollbackResponse {}

message ReadTimeseriesRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  volue.mesh.grpc.type.MeshId timeseries_id = 2;
  volue.mesh.grpc.type.UtcInterval interval = 3;

  // if we request points from a breakpoint series, the actual points
  // describing our interval, might be long before the actual interval.
  // Should we then return the actual point (outside our interval),
  // or a "fake"/virtual point inside our interval?
  // TODO: bool allow_virtual_points?
}

message ReadTimeseriesStreamRequest{
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  repeated volue.mesh.grpc.type.MeshId timeseries_id = 2;
  volue.mesh.grpc.type.UtcInterval interval = 3;
}

message ReadTimeseriesResponse {
  repeated Timeseries timeseries = 1;
}

message WriteTimeseriesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Time series must point to exactly one time series
  // - attribute or source (pointed by path or ID)
  // - physical or virtual (pointed by time series key)
  // The resolution of the points has to fit the stored time series.
  // Otherwise it will be rejected.
  Timeseries timeseries = 2;
}

message WriteTimeseriesResponse {}

message CalculationRequest {
    volue.mesh.grpc.type.Guid session_id = 1;
    string expression = 2;
    volue.mesh.grpc.type.UtcInterval interval = 3;
    volue.mesh.grpc.type.MeshId relative_to = 4;
}

message CalculationResponse {
    oneof calculation_result_oneof {
        ReadTimeseriesResponse timeseries_results = 1;  // not all fields in Timeseries result will be set (e.g. full_name, or timskey)
        NumericResults numeric_results = 2;
        StringResults string_results = 3;
    }
}

message ListModelsRequest {
  // The server session ID.
  volue.mesh.grpc.type.Guid session_id = 1;

  // If set then only models that are instances of given model definition are
  // returned. Otherwise all models are returned.
  volue.mesh.grpc.type.MeshId model_definition_id = 2;
}

message ListModelsResponse {
  repeated Object models = 1;
}

message GetObjectRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID or path of object to be returned.
  volue.mesh.grpc.type.MeshId object_id = 2;

  // Masks that define what attributes for the given object should be returned
  // in the response message.
  // If not set then all attributes will be returned.
  AttributesMasks attributes_masks = 3;

  // Defines what attribute information should be included in response.
  AttributeView attribute_view = 4;
}

message SearchObjectsRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  // Mesh searches always require a start point for the search.
  volue.mesh.grpc.type.MeshId start_object_id = 2;

  // Query in Mesh query language format.
  string query = 3;

  // Masks that define what attributes for the given object should be returned
  // in the response message.
  // If not set then all attributes will be returned.
  AttributesMasks attributes_masks = 4;

  // Defines what attribute information should be included in response.
  AttributeView attribute_view = 5;
}

message SearchObjectsByDefinitionRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId object_definition_id = 2;

  // Defines what `Object`s information should be included in the response.
  // If not set all information will be included.
  //
  // An array containing `Object` message field names to be returned in the
  // response.
  // For example to return only ID and path:
  //   field_mask = ['id', 'path']
  google.protobuf.FieldMask object_field_mask = 3;

  // If the object field mask (3) has also `attributes` set then additionally
  // user can set masks that define what attributes for the objects should be
  // returned in the response message.
  // If no attribute mask is set then all attributes will be returned.
  AttributesMasks attributes_masks = 4;

  // If the object field mask (3) has also `attributes` set then additionally
  // user can define what attribute information should be included in response.
  //
  // An array containing `Attribute` message field names to be returned in the
  // response.
  // For example to return only ID and definition:
  //   field_mask = ['id', 'definition']
  google.protobuf.FieldMask attribute_field_mask = 5;
}

message CreateObjectRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // Name of the new object.
  string name = 2;

  // Owner of the new object.
  // Owner must be an ownership relation attribute.
  // E.g.: for `SomePowerPlant1` object with path:
  //   - Model/SimpleThermalTestModel/ThermalComponent.ThermalPowerToPlantRef/SomePowerPlant1
  //   Owner will be the `ThermalPowerToPlantRef` attribute.
  volue.mesh.grpc.type.MeshId owner_id = 3;
}

message CreateModelRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Name of the new model.
  string name = 2;

  volue.mesh.grpc.type.MeshId model_definition_id = 3;
}

message UpdateObjectRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // Identifier of the object to be updated.
  volue.mesh.grpc.type.MeshId object_id = 2;

  // Only paths set in the field mask are updated.
  google.protobuf.FieldMask field_mask = 3;

  // New name of the object.
  string new_name = 4;

  // New owner of the object.
  // Owner must be an ownership relation attribute of Object or Object
  // Collection type.
  // E.g.: for `SomePowerPlant1` object with path:
  //   - Model/SimpleThermalTestModel/ThermalComponent.ThermalPowerToPlantRef/SomePowerPlant1
  //   Owner will be the `ThermalPowerToPlantRef` attribute.
  volue.mesh.grpc.type.MeshId new_owner_id = 5;
}

message UpdateObjectResponse {}

message DeleteObjectRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // Object to be deleted.
  volue.mesh.grpc.type.MeshId object_id = 2;

  // If set to true then all child objects (owned by the object to be deleted)
  // in the model will also be deleted.
  // Default value is false (default value for bool in proto3 is false).
  bool recursive_delete = 3;
}

message DeleteObjectResponse {}

message GetAttributeRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  // ID or path of attribute to be returned.
  volue.mesh.grpc.type.MeshId attribute_id = 2;

  // Defines what attribute information should be included in response.
  AttributeView attribute_view = 3;
}

message SearchAttributesRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  // Mesh searches always require a start point for the search.
  volue.mesh.grpc.type.MeshId start_object_id = 2;

  // Query in Mesh query language format.
  string query = 3;

  // Defines what attribute information should be included in response.
  AttributeView attribute_view = 4;
}

message SearchEnumerationValueUsagesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId enumeration_value_id = 2;

  // Defines what attribute information should be included in the response.
  // If not set all information will be included.
  //
  // An array containing `Attribute`/`AttributeDefinition`/`AttributeType` message field names to be returned in the response.
  // For example to return only ID, name and attribute definition (definition only applies to the `Attribute` type):
  //   field_mask = ['id', 'name', 'definition']
  google.protobuf.FieldMask field_mask = 3;
}

message UpdateSimpleAttributeRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  volue.mesh.grpc.type.MeshId attribute_id = 2;

  // Simple attribute value example:
  //   To update a string attribute value set
  //      new_singular_value.string_value = 'new_value'
  //   To update a string attribute collection values set
  //      new_collection_values[0].string_value = 'new_value_1'
  //      new_collection_values[1].string_value = 'new_value_2'
  //      new_collection_values[2].string_value = 'new_value_3'
  //
  // Note: 
  // To remove all existing values from an attribute collection
  // just set session_id and attribute_id of an attribute collection
  // type and leave the new_collection_values empty.

  // Singular type can be e.g.: double attribute
  AttributeValue new_singular_value = 3;
  // Collection of types can be e.g.: collection of double attributes
  repeated AttributeValue new_collection_values = 4;
}

message UpdateSimpleAttributeResponse {}

message UpdateTimeseriesAttributeRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  volue.mesh.grpc.type.MeshId attribute_id = 2;

  // An array containing field names to be updated.
  // For example to update a time series attribute local expression and
  // connected time series resource:
  //   field_mask = ['new_timeseries_resource_key', 'new_local_expression']
  //   new_timeseries_resource_key = 100
  //   new_local_expression = 'new local expression'
  google.protobuf.FieldMask field_mask = 3;

  // Time series key of the time series resource to be connected to
  // the given time series attribute.
  // Note:
  // To disconnect time series attribute from already connected time
  // series resource set `new_timeseries_resource_key` to 0.
  int64 new_timeseries_resource_key = 4;

  // Sets new local epxression. To remove local expression set
  // `new_local_expression` to empty string. When there is no local expression,
  // then the template expression is used.
  //
  // For more information refer to `TimeseriesAttributeValue`.
  string new_local_expression = 5;
}

message UpdateTimeseriesAttributeResponse {}

// Update request message for one-to-one link relation and one-to-many link
// relation attributes.
message UpdateLinkRelationAttributeRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // One-to-one link relation attribute (`ReferenceAttribute`) or one-to-many
  // link relation attribute (`ReferenceCollectionAttribute`) identifier.
  volue.mesh.grpc.type.MeshId attribute = 2;

  // If set to true for a one-to-many link relation (non-versioned) attribute
  // (`ReferenceCollectionAttribute`) this will append `target_object_ids` to
  // already existing ones.
  // If set to false then all currently existing target objects will be
  // replaced by `target_object_ids`.
  //
  // For one-to-one link relation (non-versioned) attribute
  // (`ReferenceAttribute`) this must set to false.
  bool append = 3;

  // If updating a one-to-one link relation (non-versioned) attribute
  // (`ReferenceAttribute`) this must contain zero or one
  // `target_object_ids`. If there is no `target_object_ids` provided then
  // currently existing target object will be removed.
  //
  // If updating a one-to-many link relation (non-versioned) attribute
  // (`ReferenceCollectionAttribute`) this may contain zero, one or more
  // `target_object_ids`s. If there is no `target_object_ids` provided and
  // `append` is set to false then all currently existing target objects will
  // be removed.
  repeated volue.mesh.grpc.type.Guid target_object_ids = 4;
}

message UpdateLinkRelationAttributeResponse {}

// Update request message for versioned one-to-one link relation attribute.
message UpdateVersionedLinkRelationAttributeRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // All existing versions inside the interval will be deleted.
  // Passing a `null` interval is an error.
  volue.mesh.grpc.type.UtcInterval interval = 2;

  // Versioned one-to-one link relation attribute (`ReferenceSeriesAttribute`)
  // identifier.
  volue.mesh.grpc.type.MeshId attribute = 3;

  // `valid_from_time` of all `versions` must be inside the interval.
  repeated LinkRelationVersion versions = 4;
}

message UpdateVersionedLinkRelationAttributeResponse {}

message UpdateEnumerationAttributeRequest {
  volue.mesh.grpc.type.Guid session_id = 1;
  volue.mesh.grpc.type.MeshId attribute_id = 2;
  volue.mesh.grpc.type.MeshId new_value = 3;
}

message UpdateEnumerationAttributeResponse {}

message GetTimeseriesResourceRequest {
  // The server session ID
  volue.mesh.grpc.type.Guid session_id = 1;

  // Time series key of the time series resource to be returned.
  int64 timeseries_resource_key = 2;
}

message UpdateTimeseriesResourceRequest {
  // ID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  // Time series key of the time series resource to be updated.
  int64 timeseries_resource_key = 2;

  // An array containing field names to be updated.
  // For example to update a time series resource curve type and
  // unit of measurement:
  //   field_mask = ['new_curve_type', 'new_unit_of_measurement_id']
  //   new_curve_type = CurveType::PIECEWISELINEAR
  //   new_unit_of_measurement_id = ID of the unit of measurement.
  //
  // All units of measurements can be listed using model definition service
  // `ListUnitsOfMeasurement` RPC.
  google.protobuf.FieldMask field_mask = 3;

  volue.mesh.grpc.type.Curve new_curve_type = 4;

  // To clear the unit of measurement leave the `new_unit_of_measurement_id`
  // field empty (not ID with only zeros), but provide `new_unit_of_measurement_id`
  // string in the field mask.
  volue.mesh.grpc.type.Guid new_unit_of_measurement_id = 5;
}

message UpdateTimeseriesResourceResponse {}

message GetRatingCurveVersionsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Retrieve all versions that apply in this interval.
  // This may include one version with a `from` before
  // the interval.
  volue.mesh.grpc.type.UtcInterval interval = 2;

  // Don't return `x_range_from` and `x_value_segments`,
  // only `from`s, in the returned `RatingCurveVersion`s.
  bool versions_only = 3;

  // The ID of a rating curve attribute (`RatingCurveAttribute`).
  volue.mesh.grpc.type.MeshId attribute = 4;
}

message GetRatingCurveVersionsResponse {
  repeated RatingCurveVersion versions = 1;
}

message UpdateRatingCurveVersionsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // All existing rating curve versions inside the interval will be
  // deleted. Passing a `null` interval is an error.
  volue.mesh.grpc.type.UtcInterval interval = 2;

  // The ID of a rating curve attribute (`RatingCurveAttribute`).
  volue.mesh.grpc.type.MeshId attribute = 3;

  // Update rating curve versions for rating curve attribute. The `from` of all
  // versions must be inside the interval. All versions must be sorted by
  // `from`.
  repeated RatingCurveVersion versions = 4;
}

message UpdateRatingCurveVersionsResponse {}

// A request for the `XySet`s in an interval, or in the case of `XYSet` attributes
// the single `XySet` owned by that attribute.
message GetXySetsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // For versioned XY sets (`XYZSeriesAttribute`) retrieve all versions that apply
  // in this interval. This may include one version with a `valid_from_time` before
  // the interval.
  //
  // For non-versioned XY set attributes (`XYSetAttribute`) this must be null.
  volue.mesh.grpc.type.UtcInterval interval = 2;

  // Don't return `XyCurve`s, only `valid_from_time`s, in the returned `XySet`s.
  bool versions_only = 3;

  // The ID of a versioned XY set attribute (`XYZSeriesAttribute`) or a non-versioned
  // XY set attribute (`XYSetAttribute`).
  volue.mesh.grpc.type.MeshId attribute = 4;
}

message GetXySetsResponse {
  repeated XySet xy_sets = 1;
}

message UpdateXySetsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // For versioned XY sets all existing XY sets inside the interval will be
  // deleted. Passing a `null` interval is an error.
  //
  // For non-versioned XY sets (`XYSetAttribute`) this must be null.
  volue.mesh.grpc.type.UtcInterval interval = 2;

  // The ID of a versioned XY set attribute (`XYZSeriesAttribute`) or a non-versioned
  // XY set attribute (`XYSetAttribute`).
  volue.mesh.grpc.type.MeshId attribute = 3;

  // If updating a versioned XY set attribute (`XYZSeriesAttribute`) the `XySet`s
  // in `xy_sets` will be inserted in the XY set series. The `valid_from_time` of all
  // XY sets must be inside the interval.
  //
  // If updating a non-versioned XY set attribute (`XYSetAttribute`) this must contain
  // zero or one `XySet`.
  repeated XySet xy_sets = 4;
}

message UpdateXySetsResponse {}

message UpdateLogLevelRequest {
  LogLevel new_log_level = 1;
}

message UpdateLogLevelResponse {}

message GetLogLevelResponse {
  // log level retrieved from Mesh
  LogLevel log_level = 1;
}

message AttributePair {

    // A time series attribute name.
    string source_attribute_name = 1;

    // The target can either be a direct name or a search/navigation spec.
    oneof target_attribute {
        // Use name when the target attribute is found by internal lookup on target object.
        string target_attribute_name = 2;

        // Use search when the target attribute is found by general search from target object.
        // To accept a search based mapping, the result of the search must be 1 time series attribute.

        // The attribute search expression may contain a macro named $ObjName to make search more specific.
        // The value of the macro is associated with the source object name.
        // By using this macro it is possible to reach out to target series in a more generic way.
        // Example: ../../*[.Type=Asset&&.Name=$ObjName&&...Name=C3].Ts1
        // When at a source object having a name CA1, the search string will be expanded to ../../*[.Type=Asset&&.Name=CA1&&...Name=C3].Ts1
        // Because the structure of the source and target hierarchy normally is the same, this will narrow the search.
        string target_attribute_search = 3;
    }
}
// Mapping details
message TypeAttributeMapping {

    // The Mesh object type name.
    // When specified, only time series that match this filter will be considered for copy.
    string object_type_name = 1;

    // Mapping between time series source attribute name and target name.
    // Target name may be a search expression.
    repeated AttributePair attribute_mapping = 2;
}

message CopyTimeseriesBetweenObjectsRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // If interval is not supplied, the request will do a tentative operation
  // which logs what time series will be copied if a valid interval is given.
  volue.mesh.grpc.type.UtcInterval interval = 2;
  
  // Identify the root object of the Source hierarchy (path or guid)
  volue.mesh.grpc.type.MeshId source = 3;
  // If scenario name is specified, the source series must be bound to a scenario object
  // To categorize an object as a scenario object follow a convention where
  // a) The object itself has name == scenario_name
  // b) The owner object (OwnerElement) has a object type name ending with Scenario
  string scenario_name = 4;
  // Identify the root object of the Target hierarchy (path or guid)
  // In case attribute mapping is enabled the source and target may refer to same object
  volue.mesh.grpc.type.MeshId target = 5;

  // Optional: Defines which part of source hierarchy to copy and potentially also where to copy.
  // In case this mapping is not specified the operation copies everything that matches general criteria.
  // General criteria: source series can provide values (ts binding or expression) and target series can be persisted.
  repeated TypeAttributeMapping mapping = 6;
}

message CopyTimeseriesBetweenObjectsResponse {

    // Number of source series considered.
    int64 source_series_count = 1;

    // Number of target series considered.
    int64 target_series_count = 2;

    // The number of series that will be copied if input interval is defined.
    // When this value is > 0 the operations were successful.
    int64 match_series_count = 3;
}

// A text resource in Mesh can be compared with a text file located at a given catalog.
// The API supports reading, writing and browsing such Mesh resource objects.

message ListTextResourcesRequest {
    volue.mesh.grpc.type.Guid session_id = 1;

    // The catalog in which we are looking for Text resources (files).
    // In case the option `include_subcatalogs` is true, this catalog is treated as the root 
    // of a hierarchical search.
    volue.mesh.grpc.type.MeshId catalog = 2;
    
    // Empty, simple "contains" pattern or a regular expression.
    // In case it is empty, all Text resources are added to reply list.
    // Else, the system will try to look for a Text resource which contains the `name_mask` value.
    // For instance ".json" will match "AB.json", "A.jsonB" etc  (contains somewhere in the name gives match).
    // If contain operation fails, the system tries to match the name of the Text resource with the `name_mask` value as a regular expression.
    string name_mask = 3;
    
    // Include search for matches in subcatalogs
    bool include_subcatalogs = 4;
}

message ListTextResourcesResponse {
    // Resources that match request
    repeated volue.mesh.grpc.type.MeshId resources = 1;
}

message GetTextResourceRequest {
    volue.mesh.grpc.type.Guid session_id = 1;

    // The path must lead to an existing Text Resource
    // If MeshId contains a GUID, the system will resolve that GUID and do not try the MeshId path definition.
    // A text path has the following format:
    // Resource/Catalog1/CatalogX/SomeTextResourceName
    volue.mesh.grpc.type.MeshId resource = 2;
}

message GetTextResourceResponse {
    volue.mesh.grpc.type.Guid id = 1;
    string path = 2;
    // The contents of the Text resource 
    string text = 3;
}

message WriteTextResourceRequest {
    volue.mesh.grpc.type.Guid session_id = 1;

    // The path may lead to an existing Text Resource
    // Or, in case allow_create is true, the resource will be created
    // This may create new catalogs, all or from a certain level
    // The first part must be Resource, the last part is taken to be the Text resource name
    // Resource/SomeTextResourceName is not accepted
    volue.mesh.grpc.type.MeshId resource = 2;
    
    // If set to false the target must be an existing text resource
    bool allow_create = 3;

    // The contents
    string text = 4;
}

message WriteTextResourceResponse {}
