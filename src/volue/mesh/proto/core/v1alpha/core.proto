syntax = "proto3";

package volue.mesh.grpc.core.v1alpha;

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/field_mask.proto";
import "volue/mesh/proto/type/resources.proto";


// Mesh server service
// -------------------------------
// The Mesh service is an API for interacting with a running Mesh server, also called just Mesh.
//
//
// Authentication
//
// When Mesh is configured to require authentication an access token is
// necessary for most calls. You can acquire an access token through Kerberos
// authentication as described above the `AuthenticateKerberos` method. Access
// tokens are passed in the `Authorization` metadata field of each RPC with the
// format `Bearer <access token>`.
//
// Many gRPC libraries provide call credential types that correctly pass the
// access token to the server, for example `grpc::AccessTokenCredentials` in C++.
// These mechanisms will generally take the bare access token (without `Bearer`),
// and create the `Bearer <access token>` string internally.
//
// Access tokens expire after an hour and should be refreshed before then.
// Getting a new token early, for example after half the expiration time, is
// recommended.
//
service MeshService {

  // Authenticate using Kerberos
  // -------------------------------
  // Perform a potentially multi-leg Kerberos authentication where the client
  // and the server sends Kerberos tickets back and forth until a complete
  // security context is established or an error occurs.

  // On success the final response from the server will contain a bearer token
  // that should be used as a token in calls that require authorization, as
  // well as the expiration time for that token.
  rpc AuthenticateKerberos(stream google.protobuf.BytesValue) returns (stream AuthenticateKerberosResponse) {}

  // Revoke an access token received from `AuthenticateKerberos`, causing
  // it to become immediately unusable. If the RPC returns without error
  // the operation succeeded *or* the token does not exist.
  rpc RevokeAccessToken(google.protobuf.StringValue) returns (RevokeAccessTokenResponse) {}

  // Returns the identity that was used to create the access token authorizing
  // this call.
  rpc GetUserIdentity(google.protobuf.Empty) returns (UserIdentity) {}

  // Sessions
  // -------------------------------
  // To work with data inside a Mesh server you need to create a workspace which
  // is called a session. Here you can have changes and calculations pending which
  // won't be visible to other users of the Mesh server until you commit them.
  //

  // Start a Mesh session on the server, return the id of the session.
  rpc StartSession(google.protobuf.Empty) returns (volue.mesh.grpc.type.Guid) {}

  // Close a session on the Mesh server.
  rpc EndSession(volue.mesh.grpc.type.Guid) returns (EndSessionResponse) {}

  // Commit changes in a server session to permanent storage.
  rpc Commit(volue.mesh.grpc.type.Guid) returns (CommitResponse) {}

  // Rollback changes that are in the server's session but not in the database yet.
  rpc Rollback(volue.mesh.grpc.type.Guid) returns (RollbackResponse) {}

  // Timeseries
  // -------------------------------
  // In its simplest form a timeseries is just a table of timestamps, flags and values.
  // Timeseries can be organized and generated in different ways.
  // Some timeseries are retrieved 'as is' from the database where they are stored, while others
  // are generated using calculations which can be based on an arbitrary set of data.
  // Timeseries can be organized in a structure which resembles catalogs and thus can have a
  // path associated with it. They can also potentially be linked to a node in a Mesh model and with
  // that get a path that represents the nodes position in the Mesh model. More meta data like unit
  // of measurement, curve type and so on can also be linked to the timeseries.

  // Get a series of timestamps, flags and values.
  rpc ReadTimeseries(ReadTimeseriesRequest) returns (ReadTimeseriesResponse) {}

  // Write a series of timestamps, flags and values.
  rpc WriteTimeseries(WriteTimeseriesRequest) returns (WriteTimeseriesResponse) {}

  // Other timeseries might not be connected to a Mesh model at all, but instead be organized
  // in some sort of catalog structure.
  // This kind of metadata is called entry data.
  rpc GetTimeseriesEntry(GetTimeseriesEntryRequest) returns (TimeseriesEntry) {}

  // Update timeseries entry meta data
  rpc UpdateTimeseriesEntry(UpdateTimeseriesEntryRequest) returns (UpdateTimeseriesEntryResponse) {}

  // When a timeseries, either calculated or not, is linked to a node in a Mesh model,
  // some meta data associated with the Mesh model node can be retrieved.
  // This kind of metadata is called attribute data.
  rpc GetTimeseriesAttribute(GetTimeseriesAttributeRequest) returns (TimeseriesAttribute) {}

  // Update timeseries attribute meta data
  rpc UpdateTimeseriesAttribute(UpdateTimeseriesAttributeRequest) returns (UpdateTimeseriesAttributeResponse) {}

  // Search for timeseries attributes in a given physical model
  //
  // The search uses Mesh's query language, which is the same language that's
  // used in for example Nimbus.
  //
  // The result stream is not ordered in any particular way, and the caller
  // should not expect the ordering of search results to be stable.
  //
  // Returns an error if:
  //
  // - the session doesn't exist,
  // - the model doesn't exist,
  // - the start object doesn't exist, or
  // - the search query is invalid.
  //
  // If the search doesn't find any results an empty stream and an OK status
  // is returned.
  rpc SearchTimeseriesAttributes(SearchTimeseriesAttributesRequest) returns (stream TimeseriesAttribute) {}

  // Run ad-hoc calculation
  rpc RunCalculation(CalculationRequest) returns (CalculationResponse) {}

  // Get the Mesh server version information
  rpc GetVersion(google.protobuf.Empty) returns (VersionInfo) {}
}

message AuthenticateKerberosResponse {
  // The Kerberos ticket returned by the server's AcceptSecurityContext call.
  bytes kerberos_token = 1;

  // A base64 encoded access token.
  string bearer_token = 2;

  // The access token will become invalid at this time.
  google.protobuf.Duration token_duration = 3;
}

message RevokeAccessTokenResponse {
  // currently empty
}

message UserIdentity {
  // A human readable name identifying this user. This name should not be
  // used as an unique identifier for the user as it may be identical
  // between users and change over time.
  string display_name = 1;

  // Where the user identity came from. Can be used together with the identifier
  // as a unique key.
  string source = 2;

  // An identifier that uniquely identifies the user within `source`, but
  // not necessarily globally. Combining `source` and `identifier` should
  // result in a globally unique identifier for the user.
  string identifier = 3;
}

message EndSessionResponse {
  // currently empty
}

message CommitResponse {
  // currently empty
}

message RollbackResponse {
  // currently empty
}

message ReadTimeseriesRequest {
  // The server session id (GUID)
  volue.mesh.grpc.type.Guid session_id = 1;

  // The search can return more than one valid object.
  // In that case, the timeseries will be read for all
  // valid objects, for the requested interval.
  ObjectId object_id = 2;
  volue.mesh.grpc.type.UtcInterval interval = 3;

  // if we request points from a breakpoint series, the actual points
  // describing our interval, might be long before the actual interval.
  // Should we then return the actual point (outside our interval),
  // or a "fake"/virtual point inside our interval?
  // TODO: bool allow_virtual_points?
}

message ReadTimeseriesResponse {
  // A search expression may return several timeseries.
  repeated Timeseries timeseries = 1;
}

message WriteTimeseriesRequest {
  volue.mesh.grpc.type.Guid session_id = 1;

  // Must point to exactly one Timeseries
  // (entry, attribute or value)
  ObjectId object_id = 2;

  // The resolution of the points has to fit the stored timeseries.
  // Otherwise it will be rejected.
  Timeseries timeseries = 3;
}

message WriteTimeseriesResponse {
  // currently empty
}

message GetTimeseriesEntryRequest {
  // GUID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;
  // Object for identifying a timeseries entry.
  TimeseriesEntryId entry_id = 2;
}

message UpdateTimeseriesEntryRequest {
  // GUID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;
  //
  TimeseriesEntryId entry_id = 2;

  // Only paths set in the field mask are updated.
  // (except complex types like Curve, those could be checked if are set)
  google.protobuf.FieldMask field_mask = 3;

  // All the following are optional.
  // -------
  // New path for entry.
  string new_path = 4;
  // New curve type of the timeseries.
  volue.mesh.grpc.type.Curve new_curve_type = 5;
  // New unit of measurement for the timeseries.
  string new_unit_of_measurement = 6;
}

message GetTimeseriesAttributeRequest {
  // GUID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;
  //
  string model = 2;
  //
  AttributeId attribute_id = 3;
}

message UpdateTimeseriesEntryResponse {
  // currently empty
}

message UpdateTimeseriesAttributeRequest {
  // GUID of the Mesh server's session in which changes should be applied.
  volue.mesh.grpc.type.Guid session_id = 1;

  AttributeId attribute_id = 2;

  // Only paths set in the field mask are updated.
  // (except complex types like TimeseriesEntryId, those could be checked if are set)
  google.protobuf.FieldMask field_mask = 3;
  TimeseriesEntryId new_timeseries_entry_id = 4;
  string new_local_expression = 5;
}

message UpdateTimeseriesAttributeResponse {
  // currently empty
}

message SearchTimeseriesAttributesRequest {
   volue.mesh.grpc.type.Guid session_id = 1;
    // Name of the physical model in which to search.
    string model_name = 2;
    // Mesh searches always require a start point for the search.
    oneof start_object_oneof {
        // Where to start the search, in the form of a `name.attribute/name.attribute/name`
        // path. For example `Norway.has_WaterCourse/Orkla`.
        string start_object_path = 3;
        // Where to start the search, in the form of a GUID.
        volue.mesh.grpc.type.Guid start_object_guid = 4;
    }
    string query = 5;
}

message CalculationRequest {
    volue.mesh.grpc.type.Guid session_id = 1;
    string expression = 2;
    volue.mesh.grpc.type.UtcInterval interval = 3;
    ObjectId relative_to = 4;
}

message CalculationResponse {
    oneof calculation_result_oneof {
        ReadTimeseriesResponse timeseries_results = 1;  // not all fields in Timeseries result will be set (e.g. full_name, or timskey)
        NumericResults numeric_results = 2;
        StringResults string_results = 3;
    }
}

// Contains one or more ways to uniquely identify an object.
message ObjectId {
  optional int64 timskey = 1;
  optional volue.mesh.grpc.type.Guid guid = 2;
  optional string full_name = 3;
}

message Timeseries {
  // GUID of the timeseries entry.
  ObjectId object_id = 1;

  // Resolution/spacing for this timeseries.
  volue.mesh.grpc.type.Resolution resolution = 2;

  // Time interval for this timeseries.
  volue.mesh.grpc.type.UtcInterval interval = 3;

  // Data contains an Apache Arrow byte representation of the timeseries points.
  // Stored in the following columns:
  // 0: (uint64) utc_time
  // 1: (uint32) flags
  // 2: (double) value
  bytes data = 4;
}

message AttributeId {
  oneof id_oneof {
    volue.mesh.grpc.type.Guid id = 1;
    string path = 2;
  }
}

message TimeseriesEntryId {
  // A timeseries entry can be uniquely identified by one the following:
  oneof id_oneof {
    // GUID of the timeseries entry.
    volue.mesh.grpc.type.Guid guid = 1;
    // Path associated with the entry.
    string path = 2;
    // The timeseries key (timskey) of the timeseries.
    int64 timeseries_key = 3;
  }
}

message TimeseriesEntry {
  volue.mesh.grpc.type.Guid id = 1;
  // 0 if local session series
  int64 timeseries_key = 2;
  // path/tscode???
  string path = 3;
  // Local session series if true
  bool temporary = 4;
  volue.mesh.grpc.type.Curve curve_type = 5;
  volue.mesh.grpc.type.Resolution resolution = 6;
  string unit_of_measurement = 7;
}

message TimeseriesAttribute {
  volue.mesh.grpc.type.Guid id = 1;
  // Model path.
  string path = 2;
  // A timeseries entry if the attribute refers to one.
  TimeseriesEntry entry = 3;
  // A local calculation expression if one is set on this physical node.
  string local_expression = 4;
  // Template expression, inherited from the repo type if set.
  string template_expression = 5;
}

message NumericResults {
    repeated double value = 1;
}

message StringResults {
    repeated string value = 1;
}

// Version information for the Mesh server.
message VersionInfo {
  string version = 1;
  string name = 2;
  string build_date = 3;
  string commit = 4;
  string full_version = 5;
}
